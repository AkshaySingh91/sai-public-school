// 1. Enhanced CollegeSettings Component with Professional Color Presets
import React, { useState } from 'react';
import { Save, Palette, RefreshCw } from 'lucide-react';
import Swal from 'sweetalert2';

const CollegeSettings = ({ college, setCollege }) => {
  const [saving, setSaving] = useState(false);
  const [brandColors, setBrandColors] = useState(college.brandColors || {
    primary: "#1e40af",
    secondary: "#374151",
    accent: "#059669",
    surface: "#f8fafc",
    text: "#1f2937"
  });

  // Professional color presets for college management
  const colorPresets = [
    {
      name: "Corporate Blue",
      colors: {
        primary: "#1e40af", // Blue-700
        secondary: "#374151", // Gray-700
        accent: "#059669", // Emerald-600
        surface: "#f8fafc", // Slate-50
        text: "#1f2937" // Gray-800
      }
    },
    {
      name: "Academic Green",
      colors: {
        primary: "#047857", // Emerald-700
        secondary: "#4b5563", // Gray-600
        accent: "#dc2626", // Red-600
        surface: "#f0fdf4", // Green-50
        text: "#1f2937"
      }
    },
    {
      name: "Professional Navy",
      colors: {
        primary: "#1e3a8a", // Blue-800
        secondary: "#6b7280", // Gray-500
        accent: "#f59e0b", // Amber-500
        surface: "#f1f5f9", // Slate-100
        text: "#0f172a" // Slate-900
      }
    },
    {
      name: "Modern Teal",
      colors: {
        primary: "#0f766e", // Teal-700
        secondary: "#374151", // Gray-700
        accent: "#dc2626", // Red-600
        surface: "#f0fdfa", // Teal-50
        text: "#1f2937"
      }
    },
    {
      name: "Executive Dark",
      colors: {
        primary: "#0369a1", // Sky-700
        secondary: "#1f2937", // Gray-800
        accent: "#ea580c", // Orange-600
        surface: "#f9fafb", // Gray-50
        text: "#111827" // Gray-900
      }
    }
  ];

  const applyPreset = (preset) => {
    setBrandColors(preset.colors);
  };

  const handleSaveBrandColors = async () => {
    setSaving(true);

    try {
      const userToken = await auth.currentUser.getIdToken();
      const endpoint = VITE_NODE_ENV === "Development"
        ? `http://localhost:${VITE_PORT}/api/college/${college.id}/branding`
        : `${VITE_DOMAIN_PROD}/api/college/${college.id}/branding`;

      const res = await fetch(endpoint, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${userToken}`
        },
        body: JSON.stringify({ brandColors })
      });

      if (!res.ok) throw new Error('Failed to save brand colors');

      // Update local state and apply theme immediately
      setCollege(prev => ({
        ...prev,
        brandColors
      }));

      // Apply theme to CSS variables immediately
      applyThemeToDocument(brandColors);

      Swal.fire({
        icon: 'success',
        title: 'Brand Colors Updated!',
        text: 'Theme applied successfully',
        timer: 2000,
        showConfirmButton: false
      });
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Save Failed',
        text: error.message
      });
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="pt-6 border-t border-gray-200">
      <div className="flex items-center mb-4">
        <Palette className="w-5 h-5 text-primary mr-2" />
        <h3 className="text-lg font-semibold text-text">Brand Colors & Theme</h3>
      </div>

      {/* Color Presets */}
      <div className="mb-6">
        <h4 className="text-sm font-medium text-secondary mb-3">Quick Presets</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
          {colorPresets.map((preset, index) => (
            <div
              key={index}
              className="p-3 border border-gray-200 rounded-lg cursor-pointer hover:border-primary transition-colors"
              onClick={() => applyPreset(preset)}
            >
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-text">{preset.name}</span>
                <div className="flex space-x-1">
                  <div
                    className="w-4 h-4 rounded-full border border-white shadow-sm"
                    style={{ backgroundColor: preset.colors.primary }}
                  />
                  <div
                    className="w-4 h-4 rounded-full border border-white shadow-sm"
                    style={{ backgroundColor: preset.colors.accent }}
                  />
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Custom Color Pickers */}
      <div className="mb-6">
        <h4 className="text-sm font-medium text-secondary mb-3">Custom Colors</h4>
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          {Object.keys(brandColors).map((colorType) => (
            <div key={colorType} className="flex flex-col items-center">
              <label className="block text-xs font-medium text-secondary mb-2 capitalize">
                {colorType}
              </label>

              <div className="relative">
                <div
                  className="w-16 h-16 rounded-xl border-2 border-white shadow-lg cursor-pointer hover:scale-105 transition-transform"
                  style={{ backgroundColor: brandColors[colorType] }}
                  onClick={() => document.getElementById(`${colorType}-picker`).click()}
                />

                <input
                  id={`${colorType}-picker`}
                  type="color"
                  value={brandColors[colorType]}
                  onChange={(e) => setBrandColors(prev => ({
                    ...prev,
                    [colorType]: e.target.value
                  }))}
                  className="absolute top-0 left-0 w-full h-full opacity-0 cursor-pointer"
                />
              </div>

              <span className="mt-2 text-xs text-secondary font-mono">
                {brandColors[colorType]}
              </span>
            </div>
          ))}
        </div>
      </div>

      {/* Preview Section */}
      <div className="mb-6 p-4 bg-surface rounded-lg border">
        <h4 className="text-sm font-medium text-secondary mb-3">Theme Preview</h4>
        <div className="space-y-3">
          <div className="flex space-x-3">
            <button className="px-4 py-2 bg-primary text-white rounded-lg text-sm font-medium">
              Primary Button
            </button>
            <button className="px-4 py-2 bg-accent text-white rounded-lg text-sm font-medium">
              Accent Button
            </button>
            <button className="px-4 py-2 bg-secondary text-white rounded-lg text-sm font-medium">
              Secondary Button
            </button>
          </div>
          <div className="p-3 bg-surface border rounded-lg">
            <p className="text-text font-medium">Sample Text Content</p>
            <p className="text-secondary text-sm">This is how your theme will look across the application.</p>
          </div>
        </div>
      </div>

      {/* Save Button */}
      <div className="flex justify-end">
        <button
          onClick={handleSaveBrandColors}
          disabled={saving}
          className="px-6 py-2.5 bg-primary text-white rounded-lg hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-all font-medium text-sm flex items-center disabled:opacity-50"
        >
          {saving ? (
            <RefreshCw size={18} className="mr-2 animate-spin" />
          ) : (
            <Save size={18} className="mr-2" />
          )}
          {saving ? 'Applying Theme...' : 'Save & Apply Theme'}
        </button>
      </div>
    </div>
  );
};

// 2. Theme Context with CSS Variable Management
import React, { createContext, useContext, useEffect, useState } from 'react';

const ThemeContext = createContext();

export const ThemeProvider = ({ children, college }) => {
  const [colors, setColors] = useState(college?.brandColors || {
    primary: "#1e40af",
    secondary: "#374151",
    accent: "#059669",
    surface: "#f8fafc",
    text: "#1f2937"
  });

  // Function to apply theme to CSS variables
  const applyThemeToDocument = (newColors) => {
    const root = document.documentElement;

    // Convert hex to RGB for opacity variations
    const hexToRgb = (hex) => {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    };

    // Set CSS custom properties
    Object.entries(newColors).forEach(([key, value]) => {
      const rgb = hexToRgb(value);
      if (rgb) {
        root.style.setProperty(`--color-${key}`, value);
        root.style.setProperty(`--color-${key}-rgb`, `${rgb.r}, ${rgb.g}, ${rgb.b}`);

        // Generate opacity variations
        root.style.setProperty(`--color-${key}-50`, `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.05)`);
        root.style.setProperty(`--color-${key}-100`, `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.1)`);
        root.style.setProperty(`--color-${key}-200`, `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.2)`);
        root.style.setProperty(`--color-${key}-300`, `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.3)`);
        root.style.setProperty(`--color-${key}-500`, `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`);
        root.style.setProperty(`--color-${key}-700`, `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.7)`);
        root.style.setProperty(`--color-${key}-900`, `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.9)`);
      }
    });

    // Generate gradient variations
    root.style.setProperty('--gradient-primary', `linear-gradient(135deg, ${newColors.primary} 0%, ${newColors.accent} 100%)`);
    root.style.setProperty('--gradient-secondary', `linear-gradient(135deg, ${newColors.secondary} 0%, ${newColors.primary} 100%)`);
    root.style.setProperty('--gradient-accent', `linear-gradient(135deg, ${newColors.accent} 0%, ${newColors.primary} 100%)`);
  };

  useEffect(() => {
    if (college?.brandColors) {
      setColors(college.brandColors);
      applyThemeToDocument(college.brandColors);
    }
  }, [college]);

  // Make applyThemeToDocument available globally
  useEffect(() => {
    window.applyThemeToDocument = applyThemeToDocument;
  }, []);

  const value = {
    colors,
    setColors,
    applyTheme: applyThemeToDocument
  };

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

// 3. Enhanced Layout Component
import React, { useEffect } from 'react';
import { useTheme } from '../contexts/ThemeContext';

const Layout = ({ children, college }) => {
  const { applyTheme } = useTheme();

  useEffect(() => {
    if (college?.brandColors) {
      applyTheme(college.brandColors);
    }
  }, [college?.brandColors, applyTheme]);

  return (
    <div className="min-h-screen bg-surface">
      <div className="theme-container">
        {children}
      </div>
    </div>
  );
};

export default Layout;

// 4. Tailwind Configuration (tailwind.config.js)
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        // Dynamic theme colors
        primary: {
          DEFAULT: 'var(--color-primary)',
          50: 'var(--color-primary-50)',
          100: 'var(--color-primary-100)',
          200: 'var(--color-primary-200)',
          300: 'var(--color-primary-300)',
          500: 'var(--color-primary-500)',
          700: 'var(--color-primary-700)',
          900: 'var(--color-primary-900)',
        },
        secondary: {
          DEFAULT: 'var(--color-secondary)',
          50: 'var(--color-secondary-50)',
          100: 'var(--color-secondary-100)',
          200: 'var(--color-secondary-200)',
          300: 'var(--color-secondary-300)',
          500: 'var(--color-secondary-500)',
          700: 'var(--color-secondary-700)',
          900: 'var(--color-secondary-900)',
        },
        accent: {
          DEFAULT: 'var(--color-accent)',
          50: 'var(--color-accent-50)',
          100: 'var(--color-accent-100)',
          200: 'var(--color-accent-200)',
          300: 'var(--color-accent-300)',
          500: 'var(--color-accent-500)',
          700: 'var(--color-accent-700)',
          900: 'var(--color-accent-900)',
        },
        surface: 'var(--color-surface)',
        text: 'var(--color-text)',
      },
      backgroundImage: {
        'gradient-primary': 'var(--gradient-primary)',
        'gradient-secondary': 'var(--gradient-secondary)',
        'gradient-accent': 'var(--gradient-accent)',
      },
      animation: {
        'gradient': 'gradient 8s linear infinite',
      },
      keyframes: {
        'gradient': {
          '0%, 100%': {
            'background-size': '200% 200%',
            'background-position': 'left center'
          },
          '50%': {
            'background-size': '200% 200%',
            'background-position': 'right center'
          },
        },
      }
    },
  },
  plugins: [],
}

// 5. Base CSS (src/index.css or styles/globals.css)
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Default theme variables */
:root {
  --color - primary: #1e40af;
  --color - primary - rgb: 30, 64, 175;
  --color - primary - 50: rgba(30, 64, 175, 0.05);
  --color - primary - 100: rgba(30, 64, 175, 0.1);
  --color - primary - 200: rgba(30, 64, 175, 0.2);
  --color - primary - 300: rgba(30, 64, 175, 0.3);
  --color - primary - 500: rgba(30, 64, 175, 0.5);
  --color - primary - 700: rgba(30, 64, 175, 0.7);
  --color - primary - 900: rgba(30, 64, 175, 0.9);

  --color - secondary: #374151;
  --color - secondary - rgb: 55, 65, 81;
  --color - secondary - 50: rgba(55, 65, 81, 0.05);
  --color - secondary - 100: rgba(55, 65, 81, 0.1);
  --color - secondary - 200: rgba(55, 65, 81, 0.2);
  --color - secondary - 300: rgba(55, 65, 81, 0.3);
  --color - secondary - 500: rgba(55, 65, 81, 0.5);
  --color - secondary - 700: rgba(55, 65, 81, 0.7);
  --color - secondary - 900: rgba(55, 65, 81, 0.9);

  --color - accent: #059669;
  --color - accent - rgb: 5, 150, 105;
  --color - accent - 50: rgba(5, 150, 105, 0.05);
  --color - accent - 100: rgba(5, 150, 105, 0.1);
  --color - accent - 200: rgba(5, 150, 105, 0.2);
  --color - accent - 300: rgba(5, 150, 105, 0.3);
  --color - accent - 500: rgba(5, 150, 105, 0.5);
  --color - accent - 700: rgba(5, 150, 105, 0.7);
  --color - accent - 900: rgba(5, 150, 105, 0.9);

  --color - surface: #f8fafc;
  --color - text: #1f2937;

  --gradient - primary: linear - gradient(135deg, var(--color - primary) 0 %, var(--color - accent) 100 %);
  --gradient - secondary: linear - gradient(135deg, var(--color - secondary) 0 %, var(--color - primary) 100 %);
  --gradient - accent: linear - gradient(135deg, var(--color - accent) 0 %, var(--color - primary) 100 %);
}

/* Smooth transitions for theme changes */
* {
  transition: background - color 0.3s ease, border- color 0.3s ease, color 0.3s ease;
}

/* Custom gradient animations */
.animate - gradient {
  background - size: 200 % 200 %;
  animation: gradient 8s ease infinite;
}

// 6. Example Usage Components

// Dashboard Header Example
const DashboardHeader = () => {
  return (
    <header className="bg-gradient-primary text-white shadow-lg">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center py-6">
          <div>
            <h1 className="text-3xl font-bold">College Dashboard</h1>
            <p className="text-primary-100 mt-1">Welcome back, Administrator</p>
          </div>
          <div className="flex space-x-4">
            <button className="bg-white/10 backdrop-blur-sm hover:bg-white/20 px-4 py-2 rounded-lg transition-all">
              Notifications
            </button>
            <button className="bg-accent hover:bg-accent/90 px-4 py-2 rounded-lg transition-all">
              Settings
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

// Card Component Example
const StatsCard = ({ title, value, icon: Icon, trend }) => {
  return (
    <div className="bg-white border border-gray-200 rounded-xl p-6 hover:shadow-lg transition-shadow">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-secondary text-sm font-medium">{title}</p>
          <p className="text-2xl font-bold text-text mt-1">{value}</p>
          {trend && (
            <p className={`text-sm mt-1 ${trend > 0 ? 'text-accent' : 'text-red-500'}`}>
              {trend > 0 ? '+' : ''}{trend}% from last month
            </p>
          )}
        </div>
        <div className="bg-primary-50 p-3 rounded-full">
          <Icon className="w-6 h-6 text-primary" />
        </div>
      </div>
    </div>
  );
};

// Navigation Example
const Navigation = () => {
  return (
    <nav className="bg-white border-r border-gray-200">
      <div className="p-4">
        <div className="space-y-2">
          <a href="#" className="flex items-center px-4 py-2 text-primary bg-primary-50 rounded-lg font-medium">
            Dashboard
          </a>
          <a href="#" className="flex items-center px-4 py-2 text-secondary hover:text-primary hover:bg-primary-50 rounded-lg transition-colors">
            Students
          </a>
          <a href="#" className="flex items-center px-4 py-2 text-secondary hover:text-primary hover:bg-primary-50 rounded-lg transition-colors">
            Faculty
          </a>
          <a href="#" className="flex items-center px-4 py-2 text-secondary hover:text-primary hover:bg-primary-50 rounded-lg transition-colors">
            Courses
          </a>
        </div>
      </div>
    </nav>
  );
};

export { CollegeSettings, ThemeProvider, useTheme, Layout, DashboardHeader, StatsCard, Navigation };